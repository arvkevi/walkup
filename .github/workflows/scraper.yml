name: Scrape MLB Walk-up Songs

on:
  schedule:
    - cron: "0 0 * * *"  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHONUNBUFFERED: 1  # Enable real-time Python output
  REQUESTS_CA_BUNDLE: /etc/ssl/certs/ca-certificates.crt  # Ensure SSL cert verification

jobs:
  get_walkups:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 30  # Set maximum job duration
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref_name }}  # Checkout current branch

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up VPC Endpoint
        id: vpc_setup
        run: |
          echo "Setting up VPC Endpoint..."
          python configure_vpc_endpoint.py
          echo "VPC Endpoint setup complete"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          VPC_ID: ${{ secrets.VPC_ID }}

      - name: Wait for VPC Endpoint to be ready
        run: |
          echo "Waiting for VPC Endpoint to be ready..."
          sleep 30
          echo "Wait complete"

      - name: Test database connection
        id: test_db
        continue-on-error: true
        run: |
          python -c "
          import psycopg2
          import sys
          import time
          from urllib.parse import urlparse

          def test_connection(uri):
              parsed = urlparse(uri)
              conn_str = f'host={parsed.hostname} port={parsed.port or 5432} dbname={parsed.path[1:]} user={parsed.username} password={parsed.password}'
              max_attempts = 3
              
              for attempt in range(max_attempts):
                  try:
                      print(f'Attempt {attempt + 1} to connect to database...')
                      conn = psycopg2.connect(conn_str, connect_timeout=10)
                      conn.close()
                      print('Database connection successful!')
                      return True
                  except Exception as e:
                      print(f'Connection attempt {attempt + 1} failed: {str(e)}')
                      if attempt < max_attempts - 1:
                          time.sleep(10)
              return False

          success = test_connection('${{ secrets.CONNECTION_URI }}')
          sys.exit(0 if success else 1)
          "
        env:
          PYTHONUNBUFFERED: 1

      - name: Scrape walkups
        run: |
          echo "Starting MLB walkup song scraper..."
          if [ "${{ steps.test_db.outcome }}" = "success" ]; then
            python scraper.py "${{ secrets.CONNECTION_URI }}" "${{ secrets.SPOTIFY_CLIENT_ID }}" "${{ secrets.SPOTIFY_CLIENT_SECRET }}" || exit 1
          else
            echo "::error::Database connection test failed. Skipping scraper."
            exit 1
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          VPC_ID: ${{ secrets.VPC_ID }}
          PYTHONUNBUFFERED: 1

      - name: Clean up VPC Endpoint
        if: always()  # Run cleanup in all cases
        run: |
          echo "Cleaning up VPC Endpoint..."
          python cleanup_vpc_endpoint.py
          echo "Cleanup complete"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          VPC_ID: ${{ secrets.VPC_ID }}

      - name: Handle failure
        if: failure()
        run: |
          echo "::error::Scraper job failed. Check the logs for details."
